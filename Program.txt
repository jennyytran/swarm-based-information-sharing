using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing; 
using CsvHelper;
using System.IO;
using System.Globalization;


namespace Swarm
{
    //consider interitance
   



    class Program
    {
        public class Sample {
            public int HoneyCount {set; get;}= 0;
            public int ExchangeCount {set;get;} = 0;
        }

        public class Average {
            public double Value {get; set;}
        }
            
        static void Main(string[] args)
            {
                Random r = new Random(); //random seed generator
                var tickData = new Sample();

                void beeSimulation(Field area, ref List<Sample> result){

                    for (var tick = 0; tick < Constant.TotalTicks; tick++){  
                        tickData = new Sample();  
                        //Console.WriteLine(tick);
                        foreach(var bee in area.BeesList.ToList()){
                            if (bee.Duty == Bee.State.exchange){
                                tickData.ExchangeCount++;
                            }   
                            bee.StateMachine(area, tick);                     
                        }

                        area.UpdateField();
                        tickData.HoneyCount = area.Hive.HoneyCount;
                        result.Add(tickData);
                    }

                }

                void writeIntoCSV(ref List<Average> data, string path){
                    using (var writer = new StreamWriter(path)){
                        using (var csv = new CsvWriter(writer,CultureInfo.InvariantCulture))
                        {
                            csv.WriteRecords(data);
                            writer.Flush();
                        }
                    }
                }

                var data = new List<List <Sample>>();
                var result = new List<Sample>();
                var area = new Field();

               for (var i = 0; i < Constant.SimulationRuns; i++){

                    area = new Field();
                    area.InitialiseField();

                    beeSimulation(area, ref result);
                    data.Add(result);
                    result = new List<Sample>();

                }

                //writeIntoCSV(ref result, "./test2/data.csv");

                var honeyAvgList  = new List<Average>();
                for (var j = 0; j < Constant.TotalTicks; j++){
                    //Console.WriteLine(data[0][j].HoneyCount + "+" + data[1][j].HoneyCount + '+' + data[2][j].HoneyCount);
                    var avg = new Average();
                    avg.Value = data.Average(innerList => innerList[j].HoneyCount);
                    honeyAvgList.Add(avg);
                    //Console.WriteLine(honeyAvg);
                    //honeyAvgList.Add(honeyAvg);
                    
                }
                
                writeIntoCSV(ref honeyAvgList, "./test2/honey.csv");

        }
    }
}



var area = new Field();
            area.Hive.Location = new Point(1,2);
            area.PatchList = new List <FlowerPatch>{
                new FlowerPatch(1, new Point(0,0), 5),
                new FlowerPatch(1, new Point(1,0), 5),
                new FlowerPatch(1, new Point(0,2), 5),
                new FlowerPatch(1, new Point(1,1), 5),
            };
            var DataCollection = new List <FlowerData>{
                new FlowerData{
                    Timestamp = 1,
                    DistanceFromHive = 1,
                    Location = new Point(0,2),
                    NectarCount = 5
                },
                new FlowerData{
                    Timestamp = 1,
                    DistanceFromHive = 1,
                    Location = new Point(1,1),
                    NectarCount = 4
                },
                new FlowerData{
                    Timestamp = 1,
                    DistanceFromHive = 1,
                    Location = new Point(2,2),
                    NectarCount = 1
                }
            };

            var result = getFScores(area, DataCollection);
           Console.WriteLine(result[0]);
           Console.WriteLine(result[1]);



            double beeFscoreAvg(Field area){
                var items = new List <double>();
                foreach (var bee in area.BeesList.ToList()){
                    items.Add(getFScores(area, bee.DataCollection));
                }
                return items.Average();
            }

             void FscoreAnalysis(ref List<List <Field>> data){
                var simulationData = new List<double>();
                var tickAvg = new List<Sample>();
                for (var i = 0; i < Constant.TotalTicks; i++){
                    for (var j = 0; j < Constant.SimulationRuns; j++){
                        simulationData.Add(beeFscoreAvg(data[j][i]));
                    }
                    tickAvg.Add(new Sample{ Value = simulationData.Average()});
                    simulationData = new List<double>();
                }

                using (var writer = new StreamWriter("./test/fscore-0.csv")){
                    using (var csv = new CsvWriter(writer,CultureInfo.InvariantCulture))
                    {
                        csv.WriteRecords(tickAvg);
                        writer.Flush();
                    }
                }
            }